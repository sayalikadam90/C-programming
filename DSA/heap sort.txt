#include <iostream>
using namespace std;
  
// To heapify a subtree rooted with node i which is
// an index in arr[]. n is size of heap
void heapify(int arr[], int n, int i)
{
    int largest = i; // Initialize largest as root
    int l = 2 * i; // left = 2*i + 1
    int r = 2 * i +1; // right = 2*i + 2
  
    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;
  
    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r;
  
    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);
  
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}
  

void heapSort(int arr[], int n)
{
   
    for (int i = n / 2; i >= 1; i--)
        heapify(arr, n, i);
  
  
    for (int i = n; i >= 1; i--) {
        
        swap(arr[0], arr[i]);
  
        
        heapify(arr, i, 0);
    }
}
  

void display(int arr[], int n)
{
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}
  

int main()
{
    int arr[50],n;
    
    cout<<"Enter size : ";
    cin>>n;
    
    cout<<"Enter element of array : ";
    for(int i=1;i<=n;i++)
    {
        cin>>arr[i];
    }
    heapSort(arr, n);
  
   cout << "Sorted array is \n";
   display(arr, n);
}